class Node:
    def __init__(self,data):
        self.data=data
        self.prev=None
        self.next=None
class doublyll:
    def __init__(self):
        self.head=None
    def push(self,newdata):
        newnode=Node(newdata)
        newnode.next=self.head
        if self.head is not None:
            self.head.prev=newnode
        self.head=newnode

    def insertafter(self,pre,newdata):
        if pre is None:
            print "NULL"
            return
        newnode=Node(newdata)
        newnode.next=pre.next
        pre.next=newnode
        newnode.prev=pre
        if newnode.next is not None:
            newnode.next.prev=newnode
    def append(self,newdata):
        newnode=Node(newdata)
        newnode.next=None
        if self.head is None:
            print "chutya banaya"
            return
        last=self.head
        while (last.next is not None):
            last=last.next
        last.next=newnode
        newnode.prev=last
        return
    def printll(self, node):
         print "\nTraversal in forward direction"
         while(node is not None):
            print " %d" %(node.data),
            last = node
            node = node.next
 
         print "\nTraversal in reverse direction"
         while(last is not None):
            print " %d" %(last.data),
            last = last.prev
        
    
x=doublyll()
x.push(5)
x.push(4)
x.push(1)
x.insertafter(x.head.next,3)

x.append(10)
x.printll(x.head)

